workflows:
  build-android-debug:
    name: Moodle App Build for Android (DEBUG - splash PNG preferencia)
    max_build_duration: 60
    environment:
      node: 20.18.0
      java: 17
      vars:
        PACKAGE_NAME: "com.upc.moodleapp"
        APP_NAME: "Moodle UPC"
    scripts:
      - name: Instalar dependencias
        script: |
          set -e
          npm install -g @ionic/cli cordova cordova-res gulp
          npm ci || npm install
      - name: Limpiar cachés/artefactos para forzar assets y estilos nuevos
        script: |
          set -e
          rm -rf www platforms/android || true
          rm -rf node_modules/.cache || true
          rm -rf ~/.gradle/caches/build-cache-* || true
      - name: Compilar web (Ionic) con estilos actualizados
        script: |
          set -e
          ionic build
      - name: Preparar recursos (icon/adaptive) y plataforma
        script: |
          set -e
          [ -f resources/icon.png ] || { echo "❌ Falta resources/icon.png"; exit 1; }
          [ -f resources/android/logo.png ] || { echo "❌ Falta resources/android/logo.png"; exit 1; }
          mkdir -p resources/android
          cp resources/icon.png resources/android/icon-foreground.png
          cp resources/icon.png resources/android/icon-background.png
          ionic cordova resources android --force --icon || true
          ionic cordova platform add android
          ionic cordova clean android || true
      - name: Compilar APK (DEBUG)
        script: |
          set -e
          ionic cordova build android --debug -- --packageType=apk
    artifacts:
      - platforms/android/app/build/outputs/apk/debug/*.apk

  build-android-release:
    name: Moodle App Build for Android (RELEASE AAB firmado para Play)
    max_build_duration: 60
    environment:
      node: 20.18.0
      java: 17
      vars:
        PACKAGE_NAME: "com.upc.moodleapp"
        APP_NAME: "Moodle UPC"
      groups:
        - keystore_group   # Asegúrate que el grupo se llama exactamente así en Codemagic
    scripts:
      - name: Instalar dependencias
        script: |
          set -e
          npm install -g @ionic/cli cordova cordova-res gulp
          npm ci || npm install

      - name: Limpiar y compilar web (Ionic)
        script: |
          set -e
          rm -rf www platforms/android || true
          rm -rf node_modules/.cache || true
          ionic build

      - name: Recursos (icon/adaptive) y plataforma
        script: |
          set -e
          [ -f resources/icon.png ] || { echo "❌ Falta resources/icon.png"; exit 1; }
          [ -f resources/android/logo.png ] || { echo "❌ Falta resources/android/logo.png"; exit 1; }
          mkdir -p resources/android
          cp resources/icon.png resources/android/icon-foreground.png
          cp resources/icon.png resources/android/icon-background.png
          ionic cordova resources android --force --icon || true

          ionic cordova platform add android
          ionic cordova clean android || true

      - name: Preflight keystore (verificar variables, decodificar y validar alias)
        script: |
          set -e
          # 1) Verificar que existan las 4 variables
          for v in CM_KEYSTORE CM_KEYSTORE_PASSWORD CM_KEY_ALIAS CM_KEY_PASSWORD; do
            if [ -z "$(eval echo \$$v)" ]; then
              echo "❌ Falta la variable $v"
              exit 1
            fi
          done
          echo "✅ Variables presentes."

          # 2) Crear script Python a archivo y ejecutarlo (evita conflictos con YAML)
          cat >/tmp/dec_keystore.py <<'PYCODE'
import os, base64, sys
b64 = os.environ['CM_KEYSTORE'].encode('utf-8')
try:
    raw = base64.b64decode(b64)
except Exception as e:
    print("❌ No se pudo decodificar CM_KEYSTORE como base64:", e)
    sys.exit(1)
open('/tmp/release.keystore','wb').write(raw)
print("✅ /tmp/release.keystore restaurado ({} bytes)".format(len(raw)))
PYCODE
          python3 /tmp/dec_keystore.py

          # 3) Mostrar alias y validar el alias especificado
          echo "▶ Alias del keystore:"
          keytool -list -v -keystore /tmp/release.keystore -storepass "$CM_KEYSTORE_PASSWORD" | grep -E 'Alias name:|Nombre de alias:' || true

          if ! keytool -list -v -keystore /tmp/release.keystore -storepass "$CM_KEYSTORE_PASSWORD" -alias "$CM_KEY_ALIAS" >/dev/null 2>&1; then
            echo "❌ El alias '$CM_KEY_ALIAS' no existe o la contraseña es incorrecta."
            exit 1
          fi
          echo "✅ Alias '$CM_KEY_ALIAS' verificado."

      - name: Crear build.json (release bundle) y compilar AAB firmado
        script: |
          set -e
          cat >/tmp/build.json <<EOF
          {
            "android": {
              "release": {
                "keystore": "/tmp/release.keystore",
                "storePassword": "${CM_KEYSTORE_PASSWORD}",
                "alias": "${CM_KEY_ALIAS}",
                "password": "${CM_KEY_PASSWORD}",
                "packageType": "bundle"
              }
            }
          }
          EOF

          echo "▶ build.json creado:"
          cat /tmp/build.json | sed -E 's/"(storePassword|password)":"[^"]+"/"***"/g'

          # Compilar AAB firmado
          ionic cordova build android --prod --release --buildConfig=/tmp/build.json -- --packageType=bundle

          echo "▶ Artefactos encontrados:"
          find platforms/android/app/build/outputs -type f | sed 's#^#  - #'

          test -f platforms/android/app/build/outputs/bundle/release/app-release.aab || { echo "❌ No se generó el AAB release"; exit 1; }

    artifacts:
      - platforms/android/app/build/outputs/bundle/release/*.aab
      - platforms/android/app/build/outputs/**/*.apk
