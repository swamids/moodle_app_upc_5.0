workflows:
  # ------------------------------------------------------------
  # DEBUG: APK sin firma (rápido para validar branding y estilos)
  # ------------------------------------------------------------
  build-android-debug:
    name: Moodle App Build for Android (DEBUG - splash PNG preferencia)
    max_build_duration: 60
    environment:
      node: 20.18.0
      java: 17
      vars:
        PACKAGE_NAME: "com.upc.moodleapp"
        APP_NAME: "Moodle UPC"
        ANDROID_NDK_VERSION: "26.1.10909125"  # soporte 16KB
    scripts:
      - name: Instalar dependencias
        script: |
          set -e
          npm install -g @ionic/cli cordova cordova-res gulp
          npm ci || npm install

      - name: Limpiar cachés/artefactos para forzar assets y estilos nuevos
        script: |
          set -e
          rm -rf www platforms/android || true
          rm -rf node_modules/.cache || true
          rm -rf ~/.gradle/caches/build-cache-* || true

      - name: Compilar web (Ionic) con estilos actualizados
        script: |
          set -e
          ionic build

      - name: Preparar recursos (icon/adaptive) y plataforma + Ajustes 16KB
        script: |
          set -e
          [ -f resources/icon.png ] || { echo "❌ Falta resources/icon.png"; exit 1; }
          [ -f resources/android/logo.png ] || { echo "❌ Falta resources/android/logo.png"; exit 1; }

          mkdir -p resources/android
          cp resources/icon.png resources/android/icon-foreground.png
          cp resources/icon.png resources/android/icon-background.png
          ionic cordova resources android --force --icon || true

          # Plataforma con soporte AGP 8.x (Cordova Android 13)
          ionic cordova platform add android@13
          ionic cordova prepare android

          echo "▶ Árbol platforms/android:"
          find platforms/android -maxdepth 3 -type f \( -name "gradle-wrapper.properties" -o -name "build.gradle" \) | sed 's#^#  - #'

          # ---- Gradle 8.4 + NDK r26 + SDK 35 ----
          WRAPPER_FILE="$(find platforms/android -path '*/gradle/wrapper/gradle-wrapper.properties' | head -n1 || true)"
          if [ -n "$WRAPPER_FILE" ] && [ -f "$WRAPPER_FILE" ]; then
            sed -i -E 's#distributionUrl=.*#distributionUrl=https\\://services.gradle.org/distributions/gradle-8.4-all.zip#g' "$WRAPPER_FILE"
          fi

          {
            echo "android.useAndroidX=true"
            echo "android.enableJetifier=true"
            echo "android.ndkVersion=${ANDROID_NDK_VERSION:-26.1.10909125}"
            echo "cdvCompileSdkVersion=35"
            echo "cdvTargetSdkVersion=35"
            echo "cdvMinSdkVersion=23"
            echo "cdvBuildMultipleApks=false"   # 🚫 evitar flavors multi-APK (AAB)
            echo 'org.gradle.jvmargs=-Xmx3g -Dfile.encoding=UTF-8 -XX:+UseParallelGC'
          } >> platforms/android/gradle.properties

          # ---- Parches AGP8, anti multi-APK y limpieza de deps ----
          APP_GRADLE="platforms/android/app/build.gradle"
          ROOT_GRADLE="platforms/android/build.gradle"

          patch_gradle_common() {
            local FILE="$1"
            [ -f "$FILE" ] || return 0
            echo "▶ Parcheando $FILE…"
            # 1) lintOptions -> lint
            perl -0777 -pe 's/lintOptions\s*\{\s*abortOnError\s+false\s*\}/lint {\n  abortOnError false\n}/g' -i "$FILE" || true
            # 2) eliminar buildToolsVersion
            sed -i -E '/buildToolsVersion/d' "$FILE" || true
            # 3) eliminar bloque multi-APK y el else-if heredado
            perl -0777 -pe 's/if\s*\(\s*Boolean\.valueOf\s*\(\s*cdvBuildMultipleApks\s*\)\s*\)\s*\{.*?\}\s*else\s*if\s*\(\s*Boolean\.valueOf\s*\(\s*cdvVersionCodeForceAbiDigit\s*\)\s*\)\s*\{.*?\}//gs' -i "$FILE" || true
          }

          patch_gradle_app() {
            local FILE="$1"
            [ -f "$FILE" ] || return 0
            # 4) quitar dependencias obsoletas/duplicadas
            sed -i -E '/"androidx\.appcompat:appcompat:1\.3\.1"/d' "$FILE" || true
            sed -i -E '/"androidx\.core:core:1\.1\.0"/d' "$FILE" || true
            sed -i -E '/"androidx\.core:core:1\.6\.\+"/d' "$FILE" || true
            sed -i -E '/"androidx\.webkit:webkit:1\.4\.0"/d' "$FILE" || true
            sed -i -E '/"androidx\.legacy:legacy-support-v4:1\.0\.0"/d' "$FILE" || true
            sed -i -E '/"com\.google\.firebase:firebase-messaging:23\.\+"/d' "$FILE" || true

            # 5) inyectar BoM de Firebase y messaging sin versión (si no existe ya)
            if ! grep -q 'platform("com.google.firebase:firebase-bom' "$FILE"; then
              perl -0777 -pe 's/(dependencies\s*\{)/\1\n    implementation platform("com.google.firebase:firebase-bom:33.5.1")\n    implementation "com.google.firebase:firebase-messaging"/s' -i "$FILE" || true
            fi

            # 6) asegurar abiFilters (AAB sin flavors)
            if grep -q 'defaultConfig\s*{' "$FILE"; then
              perl -0777 -pe 's/(defaultConfig\s*\{[^}]*)(\})/\1\n    ndk {\n      abiFilters "arm64-v8a","armeabi-v7a"\n    }\n  \2/s' -i "$FILE" || true
            fi

            # 7) forzar versiones modernas de AndroidX si algún plugin arrastra viejas
            if ! grep -q "resolutionStrategy" "$FILE"; then
              cat >> "$FILE" <<'RSBLOCK'

configurations.all {
  resolutionStrategy {
    force 'androidx.appcompat:appcompat:1.7.0'
    force 'androidx.core:core:1.13.1'
    force 'androidx.webkit:webkit:1.11.0'
  }
}
RSBLOCK
            fi
          }

          patch_gradle_common "$ROOT_GRADLE"
          patch_gradle_common "$APP_GRADLE"
          patch_gradle_app "$APP_GRADLE"

          echo "---- build.gradle (app) preview ----"
          sed -n '1,340p' "$APP_GRADLE" || true
          echo "---- gradle.properties ----"
          cat platforms/android/gradle.properties || true

          ionic cordova clean android || true

      - name: Compilar APK (DEBUG) con diagnóstico
        script: |
          set -e
          set +e
          ionic cordova build android --debug -- --packageType=apk --stacktrace --info --warning-mode=all
          EXIT=$?
          if [ $EXIT -ne 0 ]; then
            echo "⚠ cordova build falló, intento Gradle directo…"
            WRAP=""
            if [ -x platforms/android/gradlew ]; then WRAP="platforms/android/gradlew";
            elif [ -x platforms/android/tools/gradlew ]; then WRAP="platforms/android/tools/gradlew"; fi
            if [ -n "$WRAP" ]; then
              chmod +x "$WRAP"
              "$WRAP" --version
              "$WRAP" :app:properties --warning-mode=all
              "$WRAP" cdvPrintProps --warning-mode=all || true
              "$WRAP" :app:assembleDebug --stacktrace --info --warning-mode=all --no-daemon
              EXIT=$?
            else
              echo "❌ No existe gradle wrapper ni en platforms/android/gradlew ni en platforms/android/tools/gradlew"
            fi
          fi
          exit $EXIT

    artifacts:
      - platforms/android/app/build/outputs/apk/debug/*.apk


  # -----------------------------------------------------------------
  # RELEASE: Firma con keystore y genera AAB para publicar en Play
  # -----------------------------------------------------------------
  build-android-release:
    name: Moodle App Build for Android (RELEASE AAB firmado para Play)
    max_build_duration: 60
    environment:
      node: 20.18.0
      java: 17
      groups:
        - keystore_group
      vars:
        PACKAGE_NAME: "com.upc.moodleapp"
        APP_NAME: "Moodle UPC"
        ANDROID_NDK_VERSION: "26.1.10909125"  # soporte 16KB

    scripts:
      - name: Instalar dependencias
        script: |
          set -e
          npm install -g @ionic/cli cordova cordova-res gulp
          npm ci || npm install

      - name: Limpiar y compilar web (Ionic)
        script: |
          set -e
          rm -rf www platforms/android || true
          rm -rf node_modules/.cache || true
          ionic build

      - name: Recursos (icon/adaptive) y plataforma + Ajustes 16KB
        script: |
          set -e
          [ -f resources/icon.png ] || { echo "❌ Falta resources/icon.png"; exit 1; }

          mkdir -p resources/android
          cp resources/icon.png resources/android/icon-foreground.png
          cp resources/icon.png resources/android/icon-background.png
          ionic cordova resources android --force --icon || true

          ionic cordova platform add android@13
          ionic cordova prepare android

          echo "▶ Árbol platforms/android:"
          find platforms/android -maxdepth 3 -type f \( -name "gradle-wrapper.properties" -o -name "build.gradle" \) | sed 's#^#  - #'

          WRAPPER_FILE="$(find platforms/android -path '*/gradle/wrapper/gradle-wrapper.properties' | head -n1 || true)"
          if [ -n "$WRAPPER_FILE" ] && [ -f "$WRAPPER_FILE" ]; then
            sed -i -E 's#distributionUrl=.*#distributionUrl=https\\://services.gradle.org/distributions/gradle-8.4-all.zip#g' "$WRAPPER_FILE"
          fi

          {
            echo "android.useAndroidX=true"
            echo "android.enableJetifier=true"
            echo "android.ndkVersion=${ANDROID_NDK_VERSION:-26.1.10909125}"
            echo "cdvCompileSdkVersion=35"
            echo "cdvTargetSdkVersion=35"
            echo "cdvMinSdkVersion=23"
            echo "cdvBuildMultipleApks=false"
            echo 'org.gradle.jvmargs=-Xmx3g -Dfile.encoding=UTF-8 -XX:+UseParallelGC'
          } >> platforms/android/gradle.properties

          # Parches AGP8 + deps modernas
          APP_GRADLE="platforms/android/app/build.gradle"
          ROOT_GRADLE="platforms/android/build.gradle"
          patch_gradle_common() {
            local FILE="$1"
            [ -f "$FILE" ] || return 0
            perl -0777 -pe 's/lintOptions\s*\{\s*abortOnError\s+false\s*\}/lint {\n  abortOnError false\n}/g' -i "$FILE" || true
            sed -i -E '/buildToolsVersion/d' "$FILE" || true
            perl -0777 -pe 's/if\s*\(\s*Boolean\.valueOf\s*\(\s*cdvBuildMultipleApks\s*\)\s*\)\s*\{.*?\}\s*else\s*if\s*\(\s*Boolean\.valueOf\s*\(\s*cdvVersionCodeForceAbiDigit\s*\)\s*\)\s*\{.*?\}//gs' -i "$FILE" || true
          }
          patch_gradle_app() {
            local FILE="$1"
            [ -f "$FILE" ] || return 0
            sed -i -E '/"androidx\.appcompat:appcompat:1\.3\.1"/d' "$FILE" || true
            sed -i -E '/"androidx\.core:core:1\.1\.0"/d' "$FILE" || true
            sed -i -E '/"androidx\.core:core:1\.6\.\+"/d' "$FILE" || true
            sed -i -E '/"androidx\.webkit:webkit:1\.4\.0"/d' "$FILE" || true
            sed -i -E '/"androidx\.legacy:legacy-support-v4:1\.0\.0"/d' "$FILE" || true
            sed -i -E '/"com\.google\.firebase:firebase-messaging:23\.\+"/d' "$FILE" || true

            if ! grep -q 'platform("com.google.firebase:firebase-bom' "$FILE"; then
              perl -0777 -pe 's/(dependencies\s*\{)/\1\n    implementation platform("com.google.firebase:firebase-bom:33.5.1")\n    implementation "com.google.firebase:firebase-messaging"/s' -i "$FILE" || true
            fi

            if grep -q 'defaultConfig\s*{' "$FILE"; then
              perl -0777 -pe 's/(defaultConfig\s*\{[^}]*)(\})/\1\n    ndk {\n      abiFilters "arm64-v8a","armeabi-v7a"\n    }\n  \2/s' -i "$FILE" || true
            fi

            if ! grep -q "resolutionStrategy" "$FILE"; then
              cat >> "$FILE" <<'RSBLOCK'

configurations.all {
  resolutionStrategy {
    force 'androidx.appcompat:appcompat:1.7.0'
    force 'androidx.core:core:1.13.1'
    force 'androidx.webkit:webkit:1.11.0'
  }
}
RSBLOCK
            fi
          }
          patch_gradle_common "$ROOT_GRADLE"
          patch_gradle_common "$APP_GRADLE"
          patch_gradle_app "$APP_GRADLE"

          echo "---- build.gradle (app) preview ----"
          sed -n '1,360p' "$APP_GRADLE" || true
          echo "---- gradle.properties ----"
          cat platforms/android/gradle.properties || true

          ionic cordova clean android || true

      - name: Restaurar google-services.json (Firebase)
        script: |
          set -e
          if [ -z "${GOOGLE_SERVICES_JSON_B64:-}" ]; then
            echo "❌ Falta GOOGLE_SERVICES_JSON_B64 en el grupo 'keystore_group'"; exit 1
          fi
          ( printf "%s" "$GOOGLE_SERVICES_JSON_B64" | base64 --decode > /tmp/google-services.json ) || \
          ( printf "%s" "$GOOGLE_SERVICES_JSON_B64" | base64 -d        > /tmp/google-services.json ) || \
          ( printf "%s" "$GOOGLE_SERVICES_JSON_B64" | base64 -D        > /tmp/google-services.json )
          mkdir -p platforms/android/app src platforms/android/app/src/release
          cp -f /tmp/google-services.json platforms/android/app/google-services.json
          cp -f /tmp/google-services.json platforms/android/app/src/release/google-services.json
          if ! grep -q "\"package_name\"[[:space:]]*:[[:space:]]*\"$PACKAGE_NAME\"" /tmp/google-services.json; then
            echo "❌ google-services.json no corresponde a $PACKAGE_NAME"; exit 1
          fi

      - name: Sanity check del keystore (firma)
        script: |
          set -e
          for v in CM_KEYSTORE CM_KEYSTORE_PASSWORD CM_KEY_ALIAS CM_KEY_PASSWORD; do
            [ -n "${!v:-}" ] || { echo "❌ Falta $v en 'keystore_group'"; exit 1; }
          done
          ( printf "%s" "$CM_KEYSTORE" | base64 --decode > /tmp/release.keystore ) || \
          ( printf "%s" "$CM_KEYSTORE" | base64 -d        > /tmp/release.keystore ) || \
          ( printf "%s" "$CM_KEYSTORE" | base64 -D        > /tmp/release.keystore )
          keytool -list -v -keystore /tmp/release.keystore -storepass "$CM_KEYSTORE_PASSWORD" >/tmp/ksinfo.txt 2>/dev/null || { echo "❌ STOREPASS incorrecto"; exit 1; }
          TYPE=$(grep -i "Keystore type:" /tmp/ksinfo.txt | awk -F': ' '{print $2}' | tr '[:upper:]' '[:lower:]'); [ -z "$TYPE" ] && TYPE="jks"
          keytool -list -v -keystore /tmp/release.keystore -storepass "$CM_KEYSTORE_PASSWORD" -alias "$CM_KEY_ALIAS" -keypass "$CM_KEY_PASSWORD" >/dev/null 2>&1 || { echo "❌ Alias/KEYPASS incorrectos"; exit 1; }
          cat >/tmp/build.json <<EOF
          {
            "android": {
              "release": {
                "keystore": "/tmp/release.keystore",
                "storePassword": "$CM_KEYSTORE_PASSWORD",
                "alias": "$CM_KEY_ALIAS",
                "password": "$CM_KEY_PASSWORD",
                "keystoreType": "$TYPE",
                "packageType": "bundle"
              }
            }
          }
          EOF
          sed -E 's/"(storePassword|password)":"[^"]+"/"***"/g' /tmp/build.json

      - name: Build RELEASE AAB firmado (compatibilidad 16KB) con fallback y stacktrace
        script: |
          set -e
          set +e
          ionic cordova build android --prod --release --buildConfig=/tmp/build.json -- --packageType=bundle --stacktrace --info --warning-mode=all
          EXIT=$?
          if [ $EXIT -ne 0 ]; then
            echo "⚠ cordova build falló, intento Gradle directo…"
            WRAP=""
            if [ -x platforms/android/gradlew ]; then WRAP="platforms/android/gradlew";
            elif [ -x platforms/android/tools/gradlew ]; then WRAP="platforms/android/tools/gradlew"; fi
            if [ -n "$WRAP" ]; then
              chmod +x "$WRAP"
              "$WRAP" --version
              "$WRAP" :app:properties --warning-mode=all
              "$WRAP" cdvPrintProps --warning-mode=all || true
              "$WRAP" :app:bundleRelease --stacktrace --info --warning-mode=all --no-daemon
              EXIT=$?
              echo "▶ Dump de build.gradle (app) para diagnóstico"
              sed -n '1,360p' platforms/android/app/build.gradle || true
            else
              echo "❌ No existe gradle wrapper ni en platforms/android/gradlew ni en platforms/android/tools/gradlew"
            fi
          fi
          exit $EXIT

    artifacts:
      - platforms/android/app/build/outputs/bundle/release/*.aab
      - platforms/android/app/build/outputs/**/*.apk
