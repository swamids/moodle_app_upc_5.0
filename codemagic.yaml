workflows:
  # ------------------------------------------------------------
  # DEBUG: APK sin firma (rápido para validar branding y estilos)
  # ------------------------------------------------------------
  build-android-debug:
    name: Moodle App Build for Android (DEBUG - splash PNG preferencia)
    max_build_duration: 60
    environment:
      node: 20.18.0
      java: 17
      vars:
        PACKAGE_NAME: "com.upc.moodleapp"
        APP_NAME: "Moodle UPC"
    scripts:
      - name: Instalar dependencias
        script: |
          set -e
          npm install -g @ionic/cli cordova cordova-res gulp
          npm ci || npm install

      - name: Limpiar cachés/artefactos para forzar assets y estilos nuevos
        script: |
          set -e
          rm -rf www platforms/android || true
          rm -rf node_modules/.cache || true
          rm -rf ~/.gradle/caches/build-cache-* || true

      - name: Compilar web (Ionic) con estilos actualizados
        script: |
          set -e
          ionic build

      - name: Preparar recursos (icon/adaptive) y plataforma
        script: |
          set -e
          [ -f resources/icon.png ] || { echo "❌ Falta resources/icon.png"; exit 1; }
          [ -f resources/android/logo.png ] || { echo "❌ Falta resources/android/logo.png"; exit 1; }
          mkdir -p resources/android
          cp resources/icon.png resources/android/icon-foreground.png
          cp resources/icon.png resources/android/icon-background.png
          ionic cordova resources android --force --icon || true

          ionic cordova platform add android
          ionic cordova clean android || true

      - name: Compilar APK (DEBUG)
        script: |
          set -e
          ionic cordova build android --debug -- --packageType=apk

    artifacts:
      - platforms/android/app/build/outputs/apk/debug/*.apk


  # -----------------------------------------------------------------
  # RELEASE: Firma con keystore y genera AAB para publicar en Play
  # + mapping.txt (R8/ProGuard) + native-debug-symbols.zip
  #
  # Requiere grupo 'keystore_group':
  #  - CM_KEYSTORE (base64 del .keystore/.jks)
  #  - CM_KEYSTORE_PASSWORD
  #  - CM_KEY_ALIAS
  #  - CM_KEY_PASSWORD
  #  - GOOGLE_SERVICES_JSON_B64 (base64 del google-services.json de com.upc.moodleapp)
  # -----------------------------------------------------------------
  build-android-release:
    name: Moodle App Build for Android (RELEASE AAB firmado + mapping + símbolos)
    max_build_duration: 60
    environment:
      node: 20.18.0
      java: 17
      groups:
        - keystore_group
      vars:
        PACKAGE_NAME: "com.upc.moodleapp"
        APP_NAME: "Moodle UPC"

    scripts:
      - name: Instalar dependencias
        script: |
          set -e
          npm install -g @ionic/cli cordova cordova-res gulp
          npm ci || npm install

      - name: Limpiar y compilar web (Ionic)
        script: |
          set -e
          rm -rf www platforms/android || true
          rm -rf node_modules/.cache || true
          ionic build

      - name: Recursos (icon/adaptive) y plataforma
        script: |
          set -e
          [ -f resources/icon.png ] || { echo "❌ Falta resources/icon.png"; exit 1; }
          mkdir -p resources/android
          cp resources/icon.png resources/android/icon-foreground.png
          cp resources/icon.png resources/android/icon-background.png
          ionic cordova resources android --force --icon || true

          ionic cordova platform add android
          ionic cordova clean android || true

      - name: Restaurar google-services.json (Firebase)
        script: |
          set -e
          if [ -z "${GOOGLE_SERVICES_JSON_B64:-}" ]; then
            echo "❌ Falta GOOGLE_SERVICES_JSON_B64 en el grupo 'keystore_group'"; exit 1
          fi

          echo "▶ Restaurando google-services.json…"
          ( printf "%s" "$GOOGLE_SERVICES_JSON_B64" | base64 --decode > /tmp/google-services.json ) || \
          ( printf "%s" "$GOOGLE_SERVICES_JSON_B64" | base64 -d        > /tmp/google-services.json ) || \
          ( printf "%s" "$GOOGLE_SERVICES_JSON_B64" | base64 -D        > /tmp/google-services.json )

          mkdir -p platforms/android/app src
          cp -f /tmp/google-services.json platforms/android/app/google-services.json
          mkdir -p platforms/android/app/src/release
          cp -f /tmp/google-services.json platforms/android/app/src/release/google-services.json

          echo "▶ Validando package_name esperado ($PACKAGE_NAME)…"
          if grep -q "\"package_name\"[[:space:]]*:[[:space:]]*\"$PACKAGE_NAME\"" /tmp/google-services.json; then
            echo "✅ google-services.json contiene $PACKAGE_NAME"
          else
            echo "❌ El google-services.json no corresponde a $PACKAGE_NAME"
            echo "   Paquetes encontrados:"
            grep -o "\"package_name\"[^\"]*\"[^\"]*\"" /tmp/google-services.json | sed 's/.*"package_name":[[:space:]]*"\([^"]*\)".*/ - \1/'
            exit 1
          fi

      - name: Habilitar R8/ProGuard + símbolos nativos (parche en Gradle)
        script: |
          set -e
          GRADLE_APP="platforms/android/app/build.gradle"
          RULES="platforms/android/app/proguard-rules.pro"

          # Reglas básicas seguras para Ionic/Cordova + Firebase/Play Services
          cat > "$RULES" <<'PRO'
-keep class org.apache.cordova.** { *; }
-keep class com.getcapacitor.** { *; }
-keep class com.ionicframework.** { *; }
-keep class io.ionic.** { *; }
-keep class com.google.firebase.** { *; }
-keep class com.google.android.gms.** { *; }
-dontwarn com.google.firebase.**
-dontwarn com.google.android.gms.**
PRO

          python3 - <<'PY'
import re, io, sys
p = "platforms/android/app/build.gradle"
s = open(p, encoding="utf-8").read()

# Asegurar bloque release con minify/shrink/proguard y símbolos nativos
def patch_release(block):
    needs = []
    if 'minifyEnabled' not in block:
        needs.append("            minifyEnabled true")
    if 'shrinkResources' not in block:
        needs.append("            shrinkResources true")
    if 'proguardFiles' not in block:
        needs.append("            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'")
    if 'ndk {' not in block:
        needs.append("            ndk {\n                debugSymbolLevel 'SYMBOL_TABLE'\n            }")
    if needs:
        # insertar justo antes del cierre de la llave de release
        block = re.sub(r'\n\s*\}\s*$', '\n' + '\n'.join(needs) + '\n        }\n', block)
    return block

pattern = re.compile(r'(buildTypes\s*\{\s*release\s*\{)(.*?)(\n\s*\}\s*\})', re.S)
m = pattern.search(s)
if m:
    head, body, tail = m.groups()
    body2 = patch_release(body)
    s = s[:m.start()] + head + body2 + tail + s[m.end():]
else:
    # Si no hay buildTypes/release, añadir un bloque completo
    insert = """
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ndk {
                debugSymbolLevel 'SYMBOL_TABLE'
            }
        }
    }
"""
    s = re.sub(r'(android\s*\{)', r'\1' + insert, s, count=1)

open(p, 'w', encoding="utf-8").write(s)
print("✅ Patcheado", p)
PY

          # Forzar R8 (por compatibilidad con stacks antiguos de Cordova).
          echo -e '\n# Ensure R8\nandroid.enableR8=true\nandroid.enableR8.libraries=true' >> platforms/android/gradle.properties || true

      - name: Sanity check del keystore (valida storepass/alias/keypass y detecta JKS/PKCS12)
        script: |
          set -e
          for v in CM_KEYSTORE CM_KEYSTORE_PASSWORD CM_KEY_ALIAS CM_KEY_PASSWORD; do
            [ -n "${!v:-}" ] || { echo "❌ Falta $v en 'keystore_group'"; exit 1; }
          done

          echo "▶ Restaurando /tmp/release.keystore…"
          ( printf "%s" "$CM_KEYSTORE" | base64 --decode > /tmp/release.keystore ) || \
          ( printf "%s" "$CM_KEYSTORE" | base64 -d        > /tmp/release.keystore ) || \
          ( printf "%s" "$CM_KEYSTORE" | base64 -D        > /tmp/release.keystore )

          if [ ! -s /tmp/release.keystore ]; then
            echo "❌ Keystore vacío o corrupto"; exit 1;
          fi

          echo "▶ Validando STOREPASS…"
          if ! keytool -list -v -keystore /tmp/release.keystore -storepass "$CM_KEYSTORE_PASSWORD" >/tmp/ksinfo.txt 2>/dev/null; then
            echo "❌ Store password (CM_KEYSTORE_PASSWORD) incorrecto."; exit 1
          fi

          echo "▶ Detectando tipo de keystore…"
          TYPE=$(grep -i "Keystore type:" /tmp/ksinfo.txt | awk -F': ' '{print $2}' | tr '[:upper:]' '[:lower:]')
          [ -z "$TYPE" ] && TYPE="jks"
          echo "✅ Keystore type: $TYPE"

          echo "▶ Validando ALIAS y KEYPASS…"
          if ! keytool -list -v \
            -keystore /tmp/release.keystore \
            -storepass "$CM_KEYSTORE_PASSWORD" \
            -alias "$CM_KEY_ALIAS" \
            -keypass "$CM_KEY_PASSWORD" >/dev/null 2>&1; then
            echo "❌ Alias ($CM_KEY_ALIAS) o key password (CM_KEY_PASSWORD) incorrectos."; exit 1
          fi
          echo "✅ Alias y key password válidos."

          echo "▶ Creando /tmp/build.json…"
          cat >/tmp/build.json <<EOF
          {
            "android": {
              "release": {
                "keystore": "/tmp/release.keystore",
                "storePassword": "$CM_KEYSTORE_PASSWORD",
                "alias": "$CM_KEY_ALIAS",
                "password": "$CM_KEY_PASSWORD",
                "keystoreType": "$TYPE",
                "packageType": "bundle"
              }
            }
          }
          EOF
          sed -E 's/"(storePassword|password)":"[^"]+"/"***"/g' /tmp/build.json

      - name: Build RELEASE AAB firmado (genera mapping y símbolos nativos)
        script: |
          set -e
          ionic cordova build android --prod --release --buildConfig=/tmp/build.json -- --packageType=bundle

          echo "▶ Artefactos generados:"
          find platforms/android/app/build/outputs -type f | sed 's#^#  - #'

          # Comprobaciones de mapping y symbols
          test -f platforms/android/app/build/outputs/bundle/release/app-release.aab || { echo "❌ No se generó el AAB release"; exit 1; }
          if [ -f platforms/android/app/build/outputs/mapping/release/mapping.txt ]; then
            echo "✅ mapping.txt encontrado"
          else
            echo "⚠️ No se encontró mapping.txt (revisa minifyEnabled/proguard)."
          fi
          if [ -f platforms/android/app/build/outputs/native-debug-symbols/release/native-debug-symbols.zip ]; then
            echo "✅ native-debug-symbols.zip encontrado"
          else
            echo "⚠️ No se encontró native-debug-symbols.zip (debugSymbolLevel)."
          fi

    artifacts:
      - platforms/android/app/build/outputs/bundle/release/*.aab
      - platforms/android/app/build/outputs/**/*.apk
      - platforms/android/app/build/outputs/mapping/release/mapping.txt
      - platforms/android/app/build/outputs/native-debug-symbols/release/native-debug-symbols.zip
