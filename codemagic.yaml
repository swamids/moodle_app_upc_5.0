workflows:
  # ------------------------------------------------------------
  # DEBUG: APK sin firma (rápido para validar branding y estilos)
  # ------------------------------------------------------------
  build-android-debug:
    name: Moodle App Build for Android (DEBUG - splash PNG preferencia)
    max_build_duration: 60
    environment:
      node: 20.18.0
      java: 17
      vars:
        PACKAGE_NAME: "com.upc.moodleapp"
        APP_NAME: "Moodle UPC"
    scripts:
      - name: Instalar dependencias
        script: |
          set -e
          npm install -g @ionic/cli cordova cordova-res gulp
          npm ci || npm install

      - name: Configurar idioma por defecto (moodle.config.json)
        script: |
          set -e
          # Ajusta "languages" a ["es"] (solo español) o ["es","en"] (bilingüe)
          cat > moodle.config.json <<'JSON'
          {
            "app_id": "com.upc.moodleapp",
            "appname": "Moodle UPC",
            "versioncode": 10000,
            "versionname": "1.0.0",
            "languages": ["es","en"]
          }
          JSON
          echo "✅ moodle.config.json escrito con languages = [\"es\",\"en\"]"

      - name: Descargar/actualizar paquetes de idioma (ES) — FIX
        script: |
          set -e
          mkdir -p src/assets/lang
          HAVE_SCRIPT=false

          # 1) Script oficial si existe en package.json
          if npm run 2>/dev/null | grep -q "lang:update-langpacks"; then
            echo "▶ Ejecutando: npm run lang:update-langpacks"
            npm run lang:update-langpacks && HAVE_SCRIPT=true
          fi

          # 2) Script del repo si existe (fallback)
          if [ "$HAVE_SCRIPT" != "true" ] && [ -x scripts/update_langpacks.sh ]; then
            echo "▶ Ejecutando: scripts/update_langpacks.sh"
            bash scripts/update_langpacks.sh && HAVE_SCRIPT=true
          fi

          # 3) Último recurso: crear es.json mínimo para no romper el build
          if [ ! -f src/assets/lang/es.json ]; then
            echo "⚠️ No se obtuvo es.json automáticamente; creando base mínima…"
            cat > src/assets/lang/es.json <<'EOF'
          {
            "app.title": "Moodle UPC",
            "app.ok": "Aceptar",
            "app.cancel": "Cancelar",
            "app.back": "Atrás"
          }
          EOF
          fi

          # 4) Verificación
          if [ ! -s src/assets/lang/es.json ]; then
            echo "❌ src/assets/lang/es.json no existe o está vacío."
            exit 1
          fi
          echo "✅ Idioma ES disponible en src/assets/lang/es.json"

      - name: Limpiar cachés/artefactos para forzar assets y estilos nuevos
        script: |
          set -e
          rm -rf www platforms/android || true
          rm -rf node_modules/.cache || true
          rm -rf ~/.gradle/caches/build-cache-* || true

      - name: Compilar web (Ionic) con estilos actualizados
        script: |
          set -e
          ionic build

      - name: Preparar recursos (icon/adaptive) y plataforma
        script: |
          set -e
          [ -f resources/icon.png ] || { echo "❌ Falta resources/icon.png"; exit 1; }
          [ -f resources/android/logo.png ] || { echo "❌ Falta resources/android/logo.png"; exit 1; }
          mkdir -p resources/android
          cp resources/icon.png resources/android/icon-foreground.png
          cp resources/icon.png resources/android/icon-background.png
          ionic cordova resources android --force --icon || true

          ionic cordova platform add android
          ionic cordova clean android || true

      - name: Compilar APK (DEBUG)
        script: |
          set -e
          ionic cordova build android --debug -- --packageType=apk --stacktrace --info --warning-mode=all

    artifacts:
      - platforms/android/app/build/outputs/apk/debug/*.apk


  # -----------------------------------------------------------------
  # RELEASE: Firma con keystore y genera AAB para publicar en Play
  # Requiere en el grupo 'keystore_group':
  #  - CM_KEYSTORE (base64 del .keystore/.jks o .p12)
  #  - CM_KEYSTORE_PASSWORD
  #  - CM_KEY_ALIAS
  #  - CM_KEY_PASSWORD
  #  - GOOGLE_SERVICES_JSON_B64 (base64 del google-services.json de com.upc.moodleapp)
  # -----------------------------------------------------------------
  build-android-release:
    name: Moodle App Build for Android (RELEASE AAB firmado para Play)
    max_build_duration: 60
    environment:
      node: 20.18.0
      java: 17
      groups:
        - keystore_group
      vars:
        PACKAGE_NAME: "com.upc.moodleapp"
        APP_NAME: "Moodle UPC"

    scripts:
      - name: Instalar dependencias
        script: |
          set -e
          npm install -g @ionic/cli cordova cordova-res gulp
          npm ci || npm install

      - name: Configurar idioma por defecto (moodle.config.json)
        script: |
          set -e
          cat > moodle.config.json <<'JSON'
          {
            "app_id": "com.upc.moodleapp",
            "appname": "Moodle UPC",
            "versioncode": 10000,
            "versionname": "1.0.0",
            "languages": ["es","en"]
          }
          JSON

      - name: Descargar/actualizar paquetes de idioma (ES) — FIX
        script: |
          set -e
          mkdir -p src/assets/lang
          HAVE_SCRIPT=false
          if npm run 2>/dev/null | grep -q "lang:update-langpacks"; then
            npm run lang:update-langpacks && HAVE_SCRIPT=true
          fi
          if [ "$HAVE_SCRIPT" != "true" ] && [ -x scripts/update_langpacks.sh ]; then
            bash scripts/update_langpacks.sh && HAVE_SCRIPT=true
          fi
          if [ ! -f src/assets/lang/es.json ]; then
            cat > src/assets/lang/es.json <<'EOF'
          {
            "app.title": "Moodle UPC",
            "app.ok": "Aceptar",
            "app.cancel": "Cancelar",
            "app.back": "Atrás"
          }
          EOF
          fi
          if [ ! -s src/assets/lang/es.json ]; then
            echo "❌ src/assets/lang/es.json no existe o está vacío."
            exit 1
          fi
          echo "✅ Idioma ES disponible en src/assets/lang/es.json"

      - name: Limpiar y compilar web (Ionic)
        script: |
          set -e
          rm -rf www platforms/android || true
          rm -rf node_modules/.cache || true
          ionic build

      - name: Recursos (icon/adaptive) y plataforma
        script: |
          set -e
          [ -f resources/icon.png ] || { echo "❌ Falta resources/icon.png"; exit 1; }
          mkdir -p resources/android
          cp resources/icon.png resources/android/icon-foreground.png
          cp resources/icon.png resources/android/icon-background.png
          ionic cordova resources android --force --icon || true

          ionic cordova platform add android
          ionic cordova clean android || true

      - name: Restaurar google-services.json (Firebase)
        script: |
          set -e
          if [ -z "${GOOGLE_SERVICES_JSON_B64:-}" ]; then
            echo "❌ Falta GOOGLE_SERVICES_JSON_B64 en el grupo 'keystore_group'"; exit 1
          fi
          ( printf "%s" "$GOOGLE_SERVICES_JSON_B64" | base64 --decode > /tmp/google-services.json ) || \
          ( printf "%s" "$GOOGLE_SERVICES_JSON_B64" | base64 -d        > /tmp/google-services.json ) || \
          ( printf "%s" "$GOOGLE_SERVICES_JSON_B64" | base64 -D        > /tmp/google-services.json )
          mkdir -p platforms/android/app src
          cp -f /tmp/google-services.json platforms/android/app/google-services.json
          mkdir -p platforms/android/app/src/release
          cp -f /tmp/google-services.json platforms/android/app/src/release/google-services.json
          echo "✅ google-services.json listo"

      - name: Sanity check del keystore y detección de tipo (JKS/PKCS12)
        script: |
          set -e
          for v in CM_KEYSTORE CM_KEYSTORE_PASSWORD CM_KEY_ALIAS CM_KEY_PASSWORD; do
            [ -n "${!v:-}" ] || { echo "❌ Falta $v en 'keystore_group'"; exit 1; }
          done
          ( printf "%s" "$CM_KEYSTORE" | base64 --decode > /tmp/release.keystore ) || \
          ( printf "%s" "$CM_KEYSTORE" | base64 -d        > /tmp/release.keystore ) || \
          ( printf "%s" "$CM_KEYSTORE" | base64 -D        > /tmp/release.keystore )
          [ -s /tmp/release.keystore ] || { echo "❌ Keystore vacío o corrupto"; exit 1; }

          # Validar storepass y detectar tipo
          if ! keytool -list -v -keystore /tmp/release.keystore -storepass "$CM_KEYSTORE_PASSWORD" >/tmp/ksinfo.txt 2>/dev/null; then
            echo "❌ Store password (CM_KEYSTORE_PASSWORD) incorrecto."; exit 1
          fi
          TYPE=$(grep -i "Keystore type:" /tmp/ksinfo.txt | awk -F': ' '{print $2}' | tr '[:upper:]' '[:lower:]')
          [ -z "$TYPE" ] && TYPE="jks"
          echo "✅ Keystore type: $TYPE"
          echo "$TYPE" > /tmp/keystore_type

      - name: Generar build.json (seguro, sin imprimir secretos)
        script: |
          set -e
          KEYSTORE_TYPE=$(cat /tmp/keystore_type)
          node -e '
            const fs = require("fs");
            const cfg = {
              android: {
                release: {
                  keystore: "/tmp/release.keystore",
                  storePassword: process.env.CM_KEYSTORE_PASSWORD,
                  alias: process.env.CM_KEY_ALIAS,
                  password: process.env.CM_KEY_PASSWORD,
                  keystoreType: KEYSTORE_TYPE,
                  packageType: "bundle"
                }
              }
            };
            fs.writeFileSync("/tmp/build.json", JSON.stringify(cfg));
          ' KEYSTORE_TYPE="$KEYSTORE_TYPE"
          echo "✅ /tmp/build.json generado"

      - name: Build RELEASE AAB firmado (verbose + stacktrace)
        script: |
          set -e
          # Cordova + Gradle en modo verbose/stacktrace
          set +e
          ( ionic cordova build android --prod --release --buildConfig=/tmp/build.json -- --packageType=bundle --stacktrace --info --warning-mode=all ) 2>&1 | tee /tmp/gradle.out
          EXIT=$?
          set -e
          if [ $EXIT -ne 0 ]; then
            echo "❌ Falló el build. Últimas 200 líneas de gradle.out:"
            tail -n 200 /tmp/gradle.out || true
            exit $EXIT
          fi
          echo "✅ Build release completado"

          # Comprobar artefacto
          test -f platforms/android/app/build/outputs/bundle/release/app-release.aab || { echo "❌ No se generó el AAB release"; exit 1; }

    artifacts:
      - platforms/android/app/build/outputs/bundle/release/*.aab
      - platforms/android/app/build/outputs/**/*.apk
