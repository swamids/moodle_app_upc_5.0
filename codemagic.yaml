workflows:
  # ------------------------------------------------------------
  # DEBUG: APK sin firma (rápido para validar branding y estilos)
  # ------------------------------------------------------------
  build-android-debug:
    name: Moodle App Build for Android (DEBUG - splash PNG preferencia)
    max_build_duration: 60

    environment:
      node: 20.18.0
      java: 17
      vars:
        PACKAGE_NAME: "com.upc.moodleapp"
        APP_NAME: "Moodle UPC"

    scripts:
      - name: Instalar dependencias
        script: |
          set -e
          npm install -g @ionic/cli cordova cordova-res gulp
          npm ci || npm install

      - name: Limpiar cachés/artefactos para forzar assets y estilos nuevos
        script: |
          set -e
          rm -rf www platforms/android || true
          rm -rf node_modules/.cache || true
          rm -rf ~/.gradle/caches/build-cache-* || true
          echo "✔ overrides.scss existe?"; test -f src/theme/overrides.scss && tail -n 3 src/theme/overrides.scss || echo "⚠ overrides.scss NO encontrado"

      - name: Compilar web (Ionic) con estilos actualizados
        script: |
          set -e
          ionic build

      - name: Preparar recursos (icon/adaptive)
        script: |
          set -e
          [ -f resources/icon.png ] || { echo "❌ Falta resources/icon.png"; exit 1; }
          [ -f resources/android/logo.png ] || { echo "❌ Falta resources/android/logo.png"; exit 1; }
          mkdir -p resources/android
          cp resources/icon.png resources/android/icon-foreground.png
          cp resources/icon.png resources/android/icon-background.png
          ionic cordova resources android --force --icon || true

      - name: Preparar plataforma Android (limpio)
        script: |
          set -e
          ionic cordova platform add android
          ionic cordova clean android || true
          test -f platforms/android/app/src/main/res/drawable-nodpi/logo.png || echo "⚠ logo.png no copiado a res/ (no crítico)"

      - name: Compilar APK (DEBUG)
        script: |
          set -e
          ionic cordova build android --debug -- --packageType=apk

    artifacts:
      - platforms/android/app/build/outputs/apk/debug/*.apk

  # -----------------------------------------------------------------
  # RELEASE: Firma con keystore y genera AAB para publicar en Play
  # Secretos requeridos (en Codemagic → Environment):
  #  - CM_KEYSTORE (base64 del .keystore)
  #  - CM_KEYSTORE_PASSWORD
  #  - CM_KEY_ALIAS
  #  - CM_KEY_PASSWORD
  # -----------------------------------------------------------------
  build-android-release:
    name: Moodle App Build for Android (RELEASE AAB firmado para Play)
    max_build_duration: 60

    environment:
      node: 20.18.0
      java: 17
      vars:
        PACKAGE_NAME: "com.upc.moodleapp"
        APP_NAME: "Moodle UPC"

    scripts:
      - name: Instalar dependencias
        script: |
          set -e
          npm install -g @ionic/cli cordova cordova-res gulp
          npm ci || npm install

      - name: Limpiar y compilar web (Ionic)
        script: |
          set -e
          rm -rf www platforms/android || true
          rm -rf node_modules/.cache || true
          ionic build

      - name: Recursos (icon/adaptive) y plataforma
        script: |
          set -e
          [ -f resources/icon.png ] || { echo "❌ Falta resources/icon.png"; exit 1; }
          [ -f resources/android/logo.png ] || { echo "❌ Falta resources/android/logo.png"; exit 1; }
          mkdir -p resources/android
          cp resources/icon.png resources/android/icon-foreground.png
          cp resources/icon.png resources/android/icon-background.png
          ionic cordova resources android --force --icon || true

          ionic cordova platform add android
          ionic cordova clean android || true

      - name: Restaurar keystore y crear build.json (release bundle)
        script: |
          set -e
          [ -n "$CM_KEYSTORE" ] || { echo "❌ Falta CM_KEYSTORE (base64)"; exit 1; }
          printf "%s" "$CM_KEYSTORE" | base64 -d > /tmp/release.keystore

          # Heredoc SIN comillas para expandir variables
          cat >/tmp/build.json <<EOF
          {
            "android": {
              "release": {
                "keystore": "/tmp/release.keystore",
                "storePassword": "${CM_KEYSTORE_PASSWORD}",
                "alias": "${CM_KEY_ALIAS}",
                "password": "${CM_KEY_PASSWORD}",
                "packageType": "bundle"
              }
            }
          }
          EOF

          echo "▶ build.json creado (se ocultan contraseñas):"
          cat /tmp/build.json | sed -E 's/"(storePassword|password)":"[^"]+"/"***"/g'

      - name: Build RELEASE AAB firmado
        script: |
          set -e
          # Forzar bundle también por flag
          ionic cordova build android --prod --release --buildConfig=/tmp/build.json -- --packageType=bundle

          echo "▶ Artefactos generados:"
          find platforms/android/app/build/outputs -type f | sed 's#^#  - #'

          # Validar que existe el AAB
          test -f platforms/android/app/build/outputs/bundle/release/app-release.aab || { echo "❌ No se generó el AAB"; exit 1; }

    artifacts:
      - platforms/android/app/build/outputs/bundle/release/*.aab
      - platforms/android/app/build/outputs/**/*.apk
