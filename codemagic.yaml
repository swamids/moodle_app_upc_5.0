workflows:
  # ============================
  # DEBUG
  # ============================
  build-android-debug:
    name: Moodle App Build for Android (DEBUG - splash PNG preferencia)
    max_build_duration: 60
    environment:
      node: 20.18.0
      java: 17
      vars:
        PACKAGE_NAME: "com.upc.moodleapp"
        APP_NAME: "Moodle UPC"
        ANDROID_NDK_VERSION: "26.1.10909125"
    scripts:
      - name: Instalar dependencias
        script: |
          set -e
          npm install -g @ionic/cli cordova cordova-res gulp
          npm ci || npm install

      - name: Limpiar cachés/artefactos
        script: |
          set -e
          rm -rf www platforms/android || true
          rm -rf node_modules/.cache || true
          rm -rf ~/.gradle/caches/build-cache-* || true

      - name: Compilar web (Ionic)
        script: |
          set -e
          ionic build

      - name: Preparar plataforma + Ajustes AGP8/16KB (sin inyecciones riesgosas)
        script: |
          set -e
          ionic cordova resources android --force --icon || true

          # Cordova Android 13 (AGP 8 compatible)
          ionic cordova platform add android@13
          ionic cordova prepare android

          # Gradle wrapper -> 8.4
          WRAPPER_FILE="$(find platforms/android -path '*/gradle/wrapper/gradle-wrapper.properties' | head -n1 || true)"
          if [ -n "$WRAPPER_FILE" ] && [ -f "$WRAPPER_FILE" ]; then
            sed -i -E 's#distributionUrl=.*#distributionUrl=https\\://services.gradle.org/distributions/gradle-8.4-all.zip#g' "$WRAPPER_FILE"
          fi

          # gradle.properties (SDK 35 + NDK r26 + sin multi-APK)
          {
            echo "android.useAndroidX=true"
            echo "android.enableJetifier=true"
            echo "android.ndkVersion=${ANDROID_NDK_VERSION:-26.1.10909125}"
            echo "cdvCompileSdkVersion=35"
            echo "cdvTargetSdkVersion=35"
            echo "cdvMinSdkVersion=23"
            echo "cdvBuildMultipleApks=false"
            echo 'org.gradle.jvmargs=-Xmx3g -Dfile.encoding=UTF-8 -XX:+UseParallelGC'
          } >> platforms/android/gradle.properties

          ROOT_GRADLE="platforms/android/build.gradle"
          APP_GRADLE="platforms/android/app/build.gradle"

          # --- Parches AGP8 (seguros) ---
          patch_common() {
            local F="$1"; [ -f "$F" ] || return 0
            # lintOptions -> lint { }
            perl -0777 -pe 's/lintOptions\s*\{\s*abortOnError\s+false\s*\}/lint {\n  abortOnError false\n}/g' -i "$F" || true
            # eliminar buildToolsVersion
            sed -i -E '/^[[:space:]]*buildToolsVersion[[:space:]]+/d' "$F" || true
            # eliminar bloque multi-APK y el else-if (sin tocar nada más)
            perl -0777 -pe 's/if\s*\(\s*Boolean\.valueOf\s*\(\s*cdvBuildMultipleApks\s*\)\s*\)\s*\{[\s\S]*?\}\s*else\s*if\s*\(\s*Boolean\.valueOf\s*\(\s*cdvVersionCodeForceAbiDigit\s*\)\s*\)\s*\{[\s\S]*?\}//g' -i "$F" || true
          }
          patch_common "$ROOT_GRADLE"
          patch_common "$APP_GRADLE"

          # --- Limpieza de dependencias obsoletas (sin añadir nada nuevo) ---
          if [ -f "$APP_GRADLE" ]; then
            cp "$APP_GRADLE" "$APP_GRADLE.bak"

            # Quitar líneas concretas problemáticas (sin tocar llaves ni otros artifacts)
            sed -i -E '/"androidx\.appcompat:appcompat:1\.3\.1"/d'                         "$APP_GRADLE" || true
            sed -i -E '/"androidx\.core:core:1\.1\.0"/d'                                   "$APP_GRADLE" || true
            sed -i -E '/"androidx\.core:core:1\.6\.\+"/d'                                  "$APP_GRADLE" || true
            sed -i -E '/"androidx\.webkit:webkit:1\.4\.0"/d'                               "$APP_GRADLE" || true
            sed -i -E '/"androidx\.legacy:legacy-support-v4:1\.0\.0"/d'                    "$APP_GRADLE" || true
            sed -i -E '/"com\.google\.firebase:firebase-messaging:23\.\+"/d'               "$APP_GRADLE" || true
            # installreferrer 2.2 se mantiene

            # ABI filters dentro de defaultConfig (seguro para AAB)
            if grep -q 'defaultConfig[[:space:]]*{' "$APP_GRADLE" && ! grep -q 'abiFilters' "$APP_GRADLE"; then
              perl -0777 -pe 's/(defaultConfig\s*\{[^}]*)(\})/\1\n    ndk {\n      abiFilters "arm64-v8a","armeabi-v7a"\n    }\n  \2/s' -i "$APP_GRADLE" || true
            fi

            # Validación simple de llaves
            OPEN=$(tr -cd '{' < "$APP_GRADLE" | wc -c | tr -d ' ')
            CLOSE=$(tr -cd '}' < "$APP_GRADLE" | wc -c | tr -d ' ')
            if [ "$OPEN" != "$CLOSE" ]; then
              echo "⚠ Desequilibrio de llaves; restauro build.gradle original."
              mv -f "$APP_GRADLE.bak" "$APP_GRADLE"
            else
              rm -f "$APP_GRADLE.bak"
            fi
          fi

          echo "---- PREV: cabecera de app/build.gradle ----"
          sed -n '1,120p' "$APP_GRADLE" || true
          echo "---- PREV: bloque dependencies (módulo app) ----"
          # Imprime el bloque dependencies del módulo (no el de buildscript)
          awk '
            /dependencies[[:space:]]*\{/ && prev !~ /buildscript/ {print; depth=1; next}
            depth>0 {print; depth+=gsub(/\{/,"{"); depth-=gsub(/\}/,"}"); if(depth==0) exit}
            {prev=$0}
          ' "$APP_GRADLE" || true

          ionic cordova clean android || true

      - name: Compilar APK (DEBUG) con diagnóstico
        script: |
          set -e
          set +e
          ionic cordova build android --debug -- --packageType=apk --stacktrace --info --warning-mode=all
          EXIT=$?
          if [ $EXIT -ne 0 ]; then
            WRAP=""
            if [ -x platforms/android/gradlew ]; then WRAP="platforms/android/gradlew";
            elif [ -x platforms/android/tools/gradlew ]; then WRAP="platforms/android/tools/gradlew"; fi
            if [ -n "$WRAP" ]; then
              chmod +x "$WRAP"
              "$WRAP" :app:properties --warning-mode=all
              "$WRAP" cdvPrintProps --warning-mode=all || true
              "$WRAP" :app:assembleDebug --stacktrace --info --warning-mode=all --no-daemon
              EXIT=$?
            else
              echo "❌ No existe gradle wrapper"
            fi
          fi
          exit $EXIT

    artifacts:
      - platforms/android/app/build/outputs/apk/debug/*.apk

  # ============================
  # RELEASE (AAB firmado)
  # ============================
  build-android-release:
    name: Moodle App Build for Android (RELEASE AAB firmado para Play)
    max_build_duration: 60
    environment:
      node: 20.18.0
      java: 17
      groups:
        - keystore_group
      vars:
        PACKAGE_NAME: "com.upc.moodleapp"
        APP_NAME: "Moodle UPC"
        ANDROID_NDK_VERSION: "26.1.10909125"
    scripts:
      - name: Instalar dependencias
        script: |
          set -e
          npm install -g @ionic/cli cordova cordova-res gulp
          npm ci || npm install

      - name: Limpiar y compilar web (Ionic)
        script: |
          set -e
          rm -rf www platforms/android || true
          rm -rf node_modules/.cache || true
          ionic build

      - name: Preparar plataforma + Ajustes AGP8/16KB (sin inyecciones riesgosas)
        script: |
          set -e
          ionic cordova resources android --force --icon || true
          ionic cordova platform add android@13
          ionic cordova prepare android

          WRAPPER_FILE="$(find platforms/android -path '*/gradle/wrapper/gradle-wrapper.properties' | head -n1 || true)"
          [ -n "$WRAPPER_FILE" ] && sed -i -E 's#distributionUrl=.*#distributionUrl=https\\://services.gradle.org/distributions/gradle-8.4-all.zip#g' "$WRAPPER_FILE" || true

          {
            echo "android.useAndroidX=true"
            echo "android.enableJetifier=true"
            echo "android.ndkVersion=${ANDROID_NDK_VERSION:-26.1.10909125}"
            echo "cdvCompileSdkVersion=35"
            echo "cdvTargetSdkVersion=35"
            echo "cdvMinSdkVersion=23"
            echo "cdvBuildMultipleApks=false"
            echo 'org.gradle.jvmargs=-Xmx3g -Dfile.encoding=UTF-8 -XX:+UseParallelGC'
          } >> platforms/android/gradle.properties

          ROOT_GRADLE="platforms/android/build.gradle"
          APP_GRADLE="platforms/android/app/build.gradle"

          patch_common() {
            local F="$1"; [ -f "$F" ] || return 0
            perl -0777 -pe 's/lintOptions\s*\{\s*abortOnError\s+false\s*\}/lint {\n  abortOnError false\n}/g' -i "$F" || true
            sed -i -E '/^[[:space:]]*buildToolsVersion[[:space:]]+/d' "$F" || true
            perl -0777 -pe 's/if\s*\(\s*Boolean\.valueOf\s*\(\s*cdvBuildMultipleApks\s*\)\s*\)\s*\{[\s\S]*?\}\s*else\s*if\s*\(\s*Boolean\.valueOf\s*\(\s*cdvVersionCodeForceAbiDigit\s*\)\s*\)\s*\{[\s\S]*?\}//g' -i "$F" || true
          }
          patch_common "$ROOT_GRADLE"
          patch_common "$APP_GRADLE"

          if [ -f "$APP_GRADLE" ]; then
            cp "$APP_GRADLE" "$APP_GRADLE.bak"

            sed -i -E '/"androidx\.appcompat:appcompat:1\.3\.1"/d'                         "$APP_GRADLE" || true
            sed -i -E '/"androidx\.core:core:1\.1\.0"/d'                                   "$APP_GRADLE" || true
            sed -i -E '/"androidx\.core:core:1\.6\.\+"/d'                                  "$APP_GRADLE" || true
            sed -i -E '/"androidx\.webkit:webkit:1\.4\.0"/d'                               "$APP_GRADLE" || true
            sed -i -E '/"androidx\.legacy:legacy-support-v4:1\.0\.0"/d'                    "$APP_GRADLE" || true
            sed -i -E '/"com\.google\.firebase:firebase-messaging:23\.\+"/d'               "$APP_GRADLE" || true

            if grep -q 'defaultConfig[[:space:]]*{' "$APP_GRADLE" && ! grep -q 'abiFilters' "$APP_GRADLE"; then
              perl -0777 -pe 's/(defaultConfig\s*\{[^}]*)(\})/\1\n    ndk {\n      abiFilters "arm64-v8a","armeabi-v7a"\n    }\n  \2/s' -i "$APP_GRADLE" || true
            fi

            OPEN=$(tr -cd '{' < "$APP_GRADLE" | wc -c | tr -d ' ')
            CLOSE=$(tr -cd '}' < "$APP_GRADLE" | wc -c | tr -d ' ')
            if [ "$OPEN" != "$CLOSE" ]; then
              echo "⚠ Desequilibrio de llaves; restauro build.gradle original."
              mv -f "$APP_GRADLE.bak" "$APP_GRADLE"
            else
              rm -f "$APP_GRADLE.bak"
            fi
          fi

          echo "---- PREV: cabecera de app/build.gradle ----"
          sed -n '1,120p' "$APP_GRADLE" || true
          echo "---- PREV: bloque dependencies (módulo app) ----"
          awk '
            /dependencies[[:space:]]*\{/ && prev !~ /buildscript/ {print; depth=1; next}
            depth>0 {print; depth+=gsub(/\{/,"{"); depth-=gsub(/\}/,"}"); if(depth==0) exit}
            {prev=$0}
          ' "$APP_GRADLE" || true

          ionic cordova clean android || true

      - name: Restaurar google-services.json (Firebase)
        script: |
          set -e
          [ -n "${GOOGLE_SERVICES_JSON_B64:-}" ] || { echo "❌ Falta GOOGLE_SERVICES_JSON_B64"; exit 1; }
          ( printf "%s" "$GOOGLE_SERVICES_JSON_B64" | base64 --decode > /tmp/google-services.json ) || \
          ( printf "%s" "$GOOGLE_SERVICES_JSON_B64" | base64 -d        > /tmp/google-services.json ) || \
          ( printf "%s" "$GOOGLE_SERVICES_JSON_B64" | base64 -D        > /tmp/google-services.json )
          mkdir -p platforms/android/app src platforms/android/app/src/release
          cp -f /tmp/google-services.json platforms/android/app/google-services.json
          cp -f /tmp/google-services.json platforms/android/app/src/release/google-services.json
          grep -q "\"package_name\"[[:space:]]*:[[:space:]]*\"$PACKAGE_NAME\"" /tmp/google-services.json || { echo "❌ package_name no coincide"; exit 1; }

      - name: Keystore y build.json (firma)
        script: |
          set -e
          for v in CM_KEYSTORE CM_KEYSTORE_PASSWORD CM_KEY_ALIAS CM_KEY_PASSWORD; do
            [ -n "${!v:-}" ] || { echo "❌ Falta $v"; exit 1; }
          done
          ( printf "%s" "$CM_KEYSTORE" | base64 --decode > /tmp/release.keystore ) || \
          ( printf "%s" "$CM_KEYSTORE" | base64 -d        > /tmp/release.keystore ) || \
          ( printf "%s" "$CM_KEYSTORE" | base64 -D        > /tmp/release.keystore )
          keytool -list -v -keystore /tmp/release.keystore -storepass "$CM_KEYSTORE_PASSWORD" >/tmp/ksinfo.txt 2>/dev/null || { echo "❌ STOREPASS incorrecto"; exit 1; }
          TYPE=$(grep -i "Keystore type:" /tmp/ksinfo.txt | awk -F': ' '{print $2}' | tr '[:upper:]' '[:lower:]'); [ -z "$TYPE" ] && TYPE="jks"
          keytool -list -v -keystore /tmp/release.keystore -storepass "$CM_KEYSTORE_PASSWORD" -alias "$CM_KEY_ALIAS" -keypass "$CM_KEY_PASSWORD" >/dev/null 2>&1 || { echo "❌ Alias/KEYPASS incorrectos"; exit 1; }

          cat >/tmp/build.json <<EOF
          {
            "android": {
              "release": {
                "keystore": "/tmp/release.keystore",
                "storePassword": "$CM_KEYSTORE_PASSWORD",
                "alias": "$CM_KEY_ALIAS",
                "password": "$CM_KEY_PASSWORD",
                "keystoreType": "$TYPE",
                "packageType": "bundle"
              }
            }
          }
          EOF
          sed -E 's/"(storePassword|password)":"[^"]+"/"***"/g' /tmp/build.json

      - name: Build RELEASE AAB firmado (con fallback)
        script: |
          set -e
          set +e
          ionic cordova build android --prod --release --buildConfig=/tmp/build.json -- --packageType=bundle --stacktrace --info --warning-mode=all
          EXIT=$?
          if [ $EXIT -ne 0 ]; then
            WRAP=""
            if [ -x platforms/android/gradlew ]; then WRAP="platforms/android/gradlew";
            elif [ -x platforms/android/tools/gradlew ]; then WRAP="platforms/android/tools/gradlew"; fi
            if [ -n "$WRAP" ]; then
              chmod +x "$WRAP"
              "$WRAP" :app:properties --warning-mode=all
              "$WRAP" cdvPrintProps --warning-mode=all || true
              "$WRAP" :app:bundleRelease --stacktrace --info --warning-mode=all --no-daemon
              EXIT=$?
              echo "---- PREV: bloque dependencies (módulo app) ----"
              awk '
                /dependencies[[:space:]]*\{/ && prev !~ /buildscript/ {print; depth=1; next}
                depth>0 {print; depth+=gsub(/\{/,"{"); depth-=gsub(/\}/,"}"); if(depth==0) exit}
                {prev=$0}
              ' platforms/android/app/build.gradle || true
            else
              echo "❌ No existe gradle wrapper"
            fi
          fi
          exit $EXIT

    artifacts:
      - platforms/android/app/build/outputs/bundle/release/*.aab
      - platforms/android/app/build/outputs/**/*.apk
