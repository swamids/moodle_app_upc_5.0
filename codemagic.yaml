workflows:
  build-android-debug:
    name: Moodle App Build for Android (DEBUG - splash PNG preferencia)
    max_build_duration: 60
    environment:
      node: 20.18.0
      java: 17
      vars:
        PACKAGE_NAME: "com.upc.moodleapp"
        APP_NAME: "Moodle UPC"
    scripts:
      - name: Instalar dependencias
        script: |
          set -e
          npm install -g @ionic/cli cordova cordova-res gulp
          npm ci || npm install
      - name: Limpiar cachés/artefactos para forzar assets y estilos nuevos
        script: |
          set -e
          rm -rf www platforms/android || true
          rm -rf node_modules/.cache || true
          rm -rf ~/.gradle/caches/build-cache-* || true
      - name: Compilar web (Ionic) con estilos actualizados
        script: |
          set -e
          ionic build
      - name: Preparar recursos (icon/adaptive) y plataforma
        script: |
          set -e
          [ -f resources/icon.png ] || { echo "❌ Falta resources/icon.png"; exit 1; }
          [ -f resources/android/logo.png ] || { echo "❌ Falta resources/android/logo.png"; exit 1; }
          mkdir -p resources/android
          cp resources/icon.png resources/android/icon-foreground.png
          cp resources/icon.png resources/android/icon-background.png
          ionic cordova resources android --force --icon || true
          ionic cordova platform add android
          ionic cordova clean android || true
      - name: Compilar APK (DEBUG)
        script: |
          set -e
          ionic cordova build android --debug -- --packageType=apk
    artifacts:
      - platforms/android/app/build/outputs/apk/debug/*.apk

  build-android-release:
    name: Moodle App Build for Android (RELEASE AAB firmado para Play)
    max_build_duration: 60
    environment:
      node: 20.18.0
      java: 17
      vars:
        PACKAGE_NAME: "com.upc.moodleapp"
        APP_NAME: "Moodle UPC"
      groups:
        - keystore_group   # Debe existir con: CM_KEYSTORE, CM_KEYSTORE_PASSWORD, CM_KEY_ALIAS, CM_KEY_PASSWORD
    scripts:
      - name: Instalar dependencias
        script: |
          set -e
          npm install -g @ionic/cli cordova cordova-res gulp
          npm ci || npm install

      - name: Limpiar y compilar web (Ionic)
        script: |
          set -e
          rm -rf www platforms/android || true
          rm -rf node_modules/.cache || true
          ionic build

      - name: Recursos (icon/adaptive) y plataforma
        script: |
          set -e
          [ -f resources/icon.png ] || { echo "❌ Falta resources/icon.png"; exit 1; }
          [ -f resources/android/logo.png ] || { echo "❌ Falta resources/android/logo.png"; exit 1; }
          mkdir -p resources/android
          cp resources/icon.png resources/android/icon-foreground.png
          cp resources/icon.png resources/android/icon-background.png
          ionic cordova resources android --force --icon || true
          ionic cordova platform add android
          ionic cordova clean android || true

      - name: Restaurar keystore y validar alias (solo Bash, sin Python)
        script: |
          set -e
          # 1) Comprobar variables del grupo
          for v in CM_KEYSTORE CM_KEYSTORE_PASSWORD CM_KEY_ALIAS CM_KEY_PASSWORD; do
            if [ -z "$(eval echo \$$v)" ]; then
              echo "❌ Falta la variable $v en el grupo keystore_group"
              exit 1
            fi
          done
          echo "✅ Variables del keystore presentes."

          # 2) Decodificar base64 de forma portátil (GNU vs BSD/macOS)
          if base64 --help >/dev/null 2>&1; then DEC_OPT="--decode"; else DEC_OPT="-D"; fi
          printf "%s" "$CM_KEYSTORE" | base64 $DEC_OPT > /tmp/release.keystore

          if [ ! -s /tmp/release.keystore ]; then
            echo "❌ /tmp/release.keystore no se restauró correctamente."
            exit 1
          fi
          echo "✅ Keystore restaurado en /tmp/release.keystore"

          # 3) Validar alias
          if ! keytool -list -v -keystore /tmp/release.keystore -storepass "$CM_KEYSTORE_PASSWORD" -alias "$CM_KEY_ALIAS" >/dev/null 2>&1; then
            echo "❌ Alias '$CM_KEY_ALIAS' inválido o contraseña incorrecta."
            echo "▶ Alias disponibles:"
            keytool -list -v -keystore /tmp/release.keystore -storepass "$CM_KEYSTORE_PASSWORD" | grep -E 'Alias name:|Nombre de alias:' || true
            exit 1
          fi
          echo "✅ Alias '$CM_KEY_ALIAS' verificado."

          # 4) Crear build.json para firmar bundle
          cat >/tmp/build.json <<EOF
          {
            "android": {
              "release": {
                "keystore": "/tmp/release.keystore",
                "storePassword": "${CM_KEYSTORE_PASSWORD}",
                "alias": "${CM_KEY_ALIAS}",
                "password": "${CM_KEY_PASSWORD}",
                "packageType": "bundle"
              }
            }
          }
          EOF
          echo "▶ build.json listo (ocultando contraseñas):"
          cat /tmp/build.json | sed -E 's/"(storePassword|password)":"[^"]+"/"***"/g'

      - name: Build RELEASE AAB firmado
        script: |
          set -e
          ionic cordova build android --prod --release --buildConfig=/tmp/build.json -- --packageType=bundle
          echo "▶ Artefactos generados:"
          find platforms/android/app/build/outputs -type f | sed 's#^#  - #'

    artifacts:
      - platforms/android/app/build/outputs/bundle/release/*.aab
      - platforms/android/app/build/outputs/**/*.apk
