workflows:
  # ===== ANDROID (ya existentes) =====
  build-android-debug:
    name: Android Debug (branding rápido)
    max_build_duration: 60
    environment:
      groups:
        - keystore_group        # CM_KEYSTORE, CM_KEYSTORE_PASSWORD, CM_KEY_ALIAS, CM_KEY_PASSWORD
        - android_credentials   # opcional si lo usas
      vars:
        ANDROID_PACKAGE: "com.upc.moodleapp"
        BRAND_COLOR: "#C8102E"
    scripts:
      - name: Install Node deps
        script: |
          npm ci
      - name: Descargar idioma ES (Moodle App)
        script: |
          set -e
          mkdir -p src/assets/lang
          if curl -fsL "https://raw.githubusercontent.com/moodlehq/moodleapp/v5.0.0/src/assets/lang/es.json" -o src/assets/lang/es.json; then
            echo "Descargado es.json desde v5.0.0"
          else
            echo "No se encontró en v5.0.0, probando main…"
            curl -fsL "https://raw.githubusercontent.com/moodlehq/moodleapp/main/src/assets/lang/es.json" -o src/assets/lang/es.json
            echo "Descargado es.json desde main"
          fi
          test -s src/assets/lang/es.json || { echo "Falta src/assets/lang/es.json"; exit 1; }
      - name: Build web
        script: |
          npm run build
      - name: Capacitor sync
        script: |
          npx cap sync android
      - name: Build Android Debug APK
        script: |
          cd android
          ./gradlew assembleDebug
    artifacts:
      - android/app/build/outputs/**/*.apk

  build-android-release:
    name: Android Release (AAB firmado)
    max_build_duration: 90
    environment:
      groups:
        - keystore_group
      vars:
        ANDROID_PACKAGE: "com.upc.moodleapp"
        BRAND_COLOR: "#C8102E"
    scripts:
      - name: Install Node deps
        script: |
          npm ci
      - name: Descargar idioma ES (Moodle App)
        script: |
          set -e
          mkdir -p src/assets/lang
          if curl -fsL "https://raw.githubusercontent.com/moodlehq/moodleapp/v5.0.0/src/assets/lang/es.json" -o src/assets/lang/es.json; then
            echo "Descargado es.json desde v5.0.0"
          else
            echo "No se encontró en v5.0.0, probando main…"
            curl -fsL "https://raw.githubusercontent.com/moodlehq/moodleapp/main/src/assets/lang/es.json" -o src/assets/lang/es.json
            echo "Descargado es.json desde main"
          fi
          test -s src/assets/lang/es.json || { echo "Falta src/assets/lang/es.json"; exit 1; }
      - name: Build web
        script: |
          npm run build
      - name: Capacitor sync
        script: |
          npx cap sync android
      - name: Decode google-services.json (si aplica)
        script: |
          if [[ -n "$GOOGLE_SERVICES_JSON_B64" ]]; then
            echo "$GOOGLE_SERVICES_JSON_B64" | base64 --decode > android/app/google-services.json
          fi
      - name: Build Android App Bundle
        script: |
          cd android
          ./gradlew bundleRelease
    artifacts:
      - android/app/build/outputs/**/*.aab

  # ===== iOS (NUEVOS) =====
  build-ios-dev:
    name: iOS Dev (simulador o dispositivo con TestFlight interno)
    max_build_duration: 90
    environment:
      xcode: latest
      cocoapods: default
      groups:
        - apple_api_key_group
    vars:
        IOS_BUNDLE_ID: "com.upc.moodleapp"
        BRAND_COLOR: "#C8102E"
    scripts:
      - name: Install Node deps
        script: |
          npm ci
      - name: Descargar idioma ES (Moodle App)
        script: |
          set -e
          mkdir -p src/assets/lang
          if curl -fsL "https://raw.githubusercontent.com/moodlehq/moodleapp/v5.0.0/src/assets/lang/es.json" -o src/assets/lang/es.json; then
            echo "Descargado es.json desde v5.0.0"
          else
            echo "No se encontró en v5.0.0, probando main…"
            curl -fsL "https://raw.githubusercontent.com/moodlehq/moodleapp/main/src/assets/lang/es.json" -o src/assets/lang/es.json
            echo "Descargado es.json desde main"
          fi
          test -s src/assets/lang/es.json || { echo "Falta src/assets/lang/es.json"; exit 1; }
      - name: Build web
        script: |
          npm run build
      - name: Capacitor sync
        script: |
          npx cap sync ios
      - name: Place GoogleService-Info.plist (si aplica)
        script: |
          if [[ -n "$GOOGLE_SERVICE_INFO_PLIST_B64" ]]; then
            mkdir -p ios/App/App
            echo "$GOOGLE_SERVICE_INFO_PLIST_B64" | base64 --decode > ios/App/App/GoogleService-Info.plist
          fi
      - name: CocoaPods install
        script: |
          cd ios/App
          pod install
      - name: Set up automatic code signing
        script: |
          app-store-connect fetch-signing-files "$IOS_BUNDLE_ID" --type IOS_APP_STORE --create
          keychain initialize
          app-store-connect keychain add-certificates
      - name: Xcode build (archive)
        script: |
          cd ios/App
          xcodebuild -workspace App.xcworkspace -scheme App -configuration Release -archivePath $CM_BUILD_DIR/App.xcarchive archive CODE_SIGN_STYLE=Automatic
      - name: Export IPA
        script: |
          xcodebuild -exportArchive \
              -archivePath $CM_BUILD_DIR/App.xcarchive \
              -exportOptionsPlist $CM_BUILD_DIR/exportOptions.plist \
              -exportPath $CM_BUILD_DIR/ipa
    artifacts:
      - ipa/*.ipa
      - App.xcarchive
    publishing:
      app_store_connect:
        auth: api_key
        submit_to_testflight: true
        beta_groups:
          - Internal Testers

  build-ios-release:
    name: iOS Release (App Store / TestFlight)
    max_build_duration: 120
    environment:
      xcode: latest
      cocoapods: default
      groups:
        - apple_api_key_group
    vars:
        IOS_BUNDLE_ID: "com.upc.moodleapp"
        BRAND_COLOR: "#C8102E"
    scripts:
      - name: Install Node deps
        script: |
          npm ci
      - name: Descargar idioma ES (Moodle App)
        script: |
          set -e
          mkdir -p src/assets/lang
          if curl -fsL "https://raw.githubusercontent.com/moodlehq/moodleapp/v5.0.0/src/assets/lang/es.json" -o src/assets/lang/es.json; then
            echo "Descargado es.json desde v5.0.0"
          else
            echo "No se encontró en v5.0.0, probando main…"
            curl -fsL "https://raw.githubusercontent.com/moodlehq/moodleapp/main/src/assets/lang/es.json" -o src/assets/lang/es.json
            echo "Descargado es.json desde main"
          fi
          test -s src/assets/lang/es.json || { echo "Falta src/assets/lang/es.json"; exit 1; }
      - name: Build web (prod)
        script: |
          npm run build
      - name: Capacitor sync
        script: |
          npx cap sync ios
      - name: Place GoogleService-Info.plist (si aplica)
        script: |
          if [[ -n "$GOOGLE_SERVICE_INFO_PLIST_B64" ]]; then
            mkdir -p ios/App/App
            echo "$GOOGLE_SERVICE_INFO_PLIST_B64" | base64 --decode > ios/App/App/GoogleService-Info.plist
          fi
      - name: CocoaPods install
        script: |
          cd ios/App
          pod install
      - name: Automatic code signing (App Store)
        script: |
          app-store-connect fetch-signing-files "$IOS_BUNDLE_ID" --type IOS_APP_STORE --create
          keychain initialize
          app-store-connect keychain add-certificates
      - name: Xcode build (archive)
        script: |
          cd ios/App
          xcodebuild -workspace App.xcworkspace -scheme App -configuration Release -archivePath $CM_BUILD_DIR/App.xcarchive archive CODE_SIGN_STYLE=Automatic
      - name: Export IPA (App Store)
        script: |
          cat > $CM_BUILD_DIR/exportOptions.plist <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>uploadBitcode</key><false/>
            <key>compileBitcode</key><true/>
            <key>signingStyle</key><string>automatic</string>
            <key>destination</key><string>export</string>
            <key>manageAppVersionAndBuildNumber</key><true/>
          </dict>
          </plist>
          PLIST
          xcodebuild -exportArchive \
            -archivePath $CM_BUILD_DIR/App.xcarchive \
            -exportOptionsPlist $CM_BUILD_DIR/exportOptions.plist \
            -exportPath $CM_BUILD_DIR/ipa
    artifacts:
      - ipa/*.ipa
      - App.xcarchive
    publishing:
      app_store_connect:
        auth: api_key
        submit_to_testflight: true
        beta_groups:
          - Internal Testers
        # submit_to_app_store: true
