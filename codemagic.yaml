workflows:
  build-android-debug:
    name: Moodle App Build for Android (DEBUG - splash PNG)
    max_build_duration: 60

    environment:
      node: 20.18.0
      java: 17
      vars:
        PACKAGE_NAME: "com.upc.moodleapp"
        APP_NAME: "Moodle UPC"

    scripts:
      - name: Instalar dependencias
        script: |
          set -e
          npm install -g @ionic/cli cordova cordova-res gulp
          npm ci || npm install
          ionic build

      - name: Preparar recursos (icon/adaptive)
        script: |
          set -e
          [ -f resources/icon.png ] || { echo "❌ Falta resources/icon.png"; exit 1; }
          [ -f resources/android/logo.png ] || { echo "❌ Falta resources/android/logo.png"; exit 1; }

          # Adaptive icon para que cordova-res no falle
          mkdir -p resources/android
          cp resources/icon.png resources/android/icon-foreground.png
          cp resources/icon.png resources/android/icon-background.png

          ionic cordova resources android --force --icon || true
          echo "✅ cordova-res ejecutado."

      - name: Preparar plataforma Android y forzar splash del sistema
        script: |
          set -e
          ionic cordova platform rm android || true
          ionic cordova platform add android

          # Verifica que config.xml haya copiado el logo a res/
          test -f platforms/android/app/src/main/res/drawable-nodpi/logo.png \
            || { echo "❌ Falta logo.png en res/drawable-nodpi (revisa <resource-file> en config.xml)"; exit 1; }

          MANIFEST="platforms/android/app/src/main/AndroidManifest.xml"
          echo "▶ Verificando AndroidManifest.xml…"

          # Escribimos el script Python a archivo (sin heredocs)
          PATCH="/tmp/patch_manifest.py"
          rm -f "$PATCH"
          printf '%s\n' \
            'import io' \
            'p = "platforms/android/app/src/main/AndroidManifest.xml"' \
            'with io.open(p, "r", encoding="utf-8") as f:' \
            '    s = f.read()' \
            'if "windowSplashScreenAnimatedIcon" not in s:' \
            '    s = s.replace(' \
            '        "<application ", ' \
            '        "<application android:windowSplashScreenAnimatedIcon=\"@drawable/logo\" android:windowSplashScreenBackground=\"#FFFFFF\" android:windowSplashScreenIconBackgroundColor=\"#FFFFFF\" ", ' \
            '        1' \
            '    )' \
            '    with io.open(p, "w", encoding="utf-8") as f:' \
            '        f.write(s)' \
            'print("patched" if "windowSplashScreenAnimatedIcon" in s else "nochange")' \
            > "$PATCH"

          python3 "$PATCH"

          # Confirmación
          grep -n 'windowSplashScreenAnimatedIcon' "$MANIFEST" \
            || { echo "❌ Patch no aplicado"; exit 1; }
          grep -n '@drawable/logo' "$MANIFEST" \
            || { echo "❌ Manifest no apunta a @drawable/logo"; exit 1; }

      - name: Compilar APK (DEBUG)
        script: |
          set -e
          ionic cordova build android --debug -- --packageType=apk

    artifacts:
      - platforms/android/app/build/outputs/apk/debug/*.apk
